// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: pkg/proto/queue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageQueue_Send_FullMethodName    = "/messagequeue.MessageQueue/Send"
	MessageQueue_Receive_FullMethodName = "/messagequeue.MessageQueue/Receive"
)

// MessageQueueClient is the client API for MessageQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageQueueClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (MessageQueue_SendClient, error)
	Receive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MessageQueue_ReceiveClient, error)
}

type messageQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageQueueClient(cc grpc.ClientConnInterface) MessageQueueClient {
	return &messageQueueClient{cc}
}

func (c *messageQueueClient) Send(ctx context.Context, opts ...grpc.CallOption) (MessageQueue_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageQueue_ServiceDesc.Streams[0], MessageQueue_Send_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageQueueSendClient{stream}
	return x, nil
}

type MessageQueue_SendClient interface {
	Send(*MessagePayload) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageQueueSendClient struct {
	grpc.ClientStream
}

func (x *messageQueueSendClient) Send(m *MessagePayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageQueueSendClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageQueueClient) Receive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MessageQueue_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageQueue_ServiceDesc.Streams[1], MessageQueue_Receive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageQueueReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageQueue_ReceiveClient interface {
	Recv() (*MessagePayload, error)
	grpc.ClientStream
}

type messageQueueReceiveClient struct {
	grpc.ClientStream
}

func (x *messageQueueReceiveClient) Recv() (*MessagePayload, error) {
	m := new(MessagePayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageQueueServer is the server API for MessageQueue service.
// All implementations must embed UnimplementedMessageQueueServer
// for forward compatibility
type MessageQueueServer interface {
	Send(MessageQueue_SendServer) error
	Receive(*Empty, MessageQueue_ReceiveServer) error
	mustEmbedUnimplementedMessageQueueServer()
}

// UnimplementedMessageQueueServer must be embedded to have forward compatible implementations.
type UnimplementedMessageQueueServer struct {
}

func (UnimplementedMessageQueueServer) Send(MessageQueue_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessageQueueServer) Receive(*Empty, MessageQueue_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedMessageQueueServer) mustEmbedUnimplementedMessageQueueServer() {}

// UnsafeMessageQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageQueueServer will
// result in compilation errors.
type UnsafeMessageQueueServer interface {
	mustEmbedUnimplementedMessageQueueServer()
}

func RegisterMessageQueueServer(s grpc.ServiceRegistrar, srv MessageQueueServer) {
	s.RegisterService(&MessageQueue_ServiceDesc, srv)
}

func _MessageQueue_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageQueueServer).Send(&messageQueueSendServer{stream})
}

type MessageQueue_SendServer interface {
	SendAndClose(*Empty) error
	Recv() (*MessagePayload, error)
	grpc.ServerStream
}

type messageQueueSendServer struct {
	grpc.ServerStream
}

func (x *messageQueueSendServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageQueueSendServer) Recv() (*MessagePayload, error) {
	m := new(MessagePayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageQueue_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageQueueServer).Receive(m, &messageQueueReceiveServer{stream})
}

type MessageQueue_ReceiveServer interface {
	Send(*MessagePayload) error
	grpc.ServerStream
}

type messageQueueReceiveServer struct {
	grpc.ServerStream
}

func (x *messageQueueReceiveServer) Send(m *MessagePayload) error {
	return x.ServerStream.SendMsg(m)
}

// MessageQueue_ServiceDesc is the grpc.ServiceDesc for MessageQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagequeue.MessageQueue",
	HandlerType: (*MessageQueueServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _MessageQueue_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _MessageQueue_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/queue.proto",
}
